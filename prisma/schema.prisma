// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для курса
model Course {
  id          String @id @default(cuid())
  name        String
  description String
}

// Модель для учетной записи
model Account {
  id                String  @id @default(cuid()) // Идентификатор учетной записи
  userId            String // Идентификатор пользователя
  type              String // Тип учетной записи
  provider          String // Поставщик учетной записи
  providerAccountId String // Идентификатор учетной записи поставщика
  refresh_token     String? @db.Text // Токен обновления (необязательное поле)
  access_token      String? @db.Text // Токен доступа (необязательное поле)
  expires_at        Int? // Время истечения
  token_type        String? // Тип токена
  scope             String? // Область
  id_token          String? @db.Text // Токен идентификатора (необязательное поле)
  session_state     String? // Состояние сессии

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Связь с пользователем

  @@unique([provider, providerAccountId]) // Уникальный индекс по поставщику и идентификатору учетной записи
}

model Session {
  id           String   @id @default(cuid()) // Идентификатор сессии
  sessionToken String   @unique // Уникальный токен сессии
  userId       String // Идентификатор пользователя
  expires      DateTime // Время истечения
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Связь с пользователем
}

// Модель для пользователя
model User {
  id            String    @id @default(cuid()) // Идентификатор пользователя
  email         String    @unique // Почта пользователя
  role          ROLE      @default(USER) // Роль пользователя
  name          String? // Имя пользователя (необязательное поле)
  emailVerified DateTime? // Дата подтверждения почты
  image         String? // Ссылка на изображение пользователя
  accounts      Account[] // Учетные записи пользователя
  sessions      Session[] // Сессии пользователя
}

// Модель для токена верификации
model VerificationToken {
  identifier String // Идентификатор
  token      String   @unique // Токен
  expires    DateTime // Время истечения

  @@unique([identifier, token]) // Уникальный индекс по идентификатору и токену
}

// Перечисление для ролей
enum ROLE {
  ADMIN
  USER
}

// Модель для узла на карте
model MapNode {
  id         String             @id @default(cuid()) // Уникальный идентификатор узла (генерируется по умолчанию)
  x          Float // Координата X узла
  y          Float // Координата Y узла
  width      Int                @default(100) // Ширина узла по умолчанию
  height     Int                @default(100) // Высота узла по умолчанию
  rotation   Int                @default(0) // Угол поворота узла по умолчанию
  scale      Float              @default(1) // Масштаб узла по умолчанию
  hidden     Boolean // Флаг, указывающий, скрыт ли узел
  zIndex     Int? // Z-индекс узла (необязательное поле)
  courseData MapNodeCourseData? // Данные о курсе, связанные с узлом
  imageData  MapNodeImageData? // Данные об изображении, связанные с узлом
}

// Модель для данных о курсе, связанных с узлом
model MapNodeCourseData {
  id        String   @id @default(cuid()) // Уникальный идентификатор данных о курсе (генерируется по умолчанию)
  courseId  String   @unique // Идентификатор курса (уникальное значение)
  mapNode   MapNode? @relation(fields: [mapNodeId], references: [id], onDelete: Cascade) // Связь с узлом карты
  mapNodeId String?  @unique // Идентификатор узла (уникальное значение)
}

// Модель для изображения, связанного с узлом на карте
model MapNodeImageData {
  id        String   @id @default(cuid()) // Уникальный идентификатор изображения (генерируется по умолчанию)
  src       String // Путь к изображению
  mapNode   MapNode? @relation(fields: [mapNodeId], references: [id], onDelete: Cascade) // Связь с узлом карты
  mapNodeId String?  @unique // Идентификатор узла (уникальное значение)
}
